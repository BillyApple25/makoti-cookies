// üß™ SCRIPT POUR CR√âER DES DONN√âES DE TEST POUR LE SYST√àME DE RATING
// Copiez ce code dans la console de votre navigateur (F12) sur n'importe quelle page de votre app

console.log('üöÄ CR√âATION DE DONN√âES DE TEST POUR LE SYST√àME DE RATING');

async function createRatingTestData() {
  try {
    // Import Firebase
    const { initializeApp } = await import('https://www.gstatic.com/firebasejs/10.14.1/firebase-app.js');
    const { getFirestore, collection, getDocs, addDoc, deleteDoc, serverTimestamp } = await import('https://www.gstatic.com/firebasejs/10.14.1/firebase-firestore.js');

    // Configuration Firebase (remplacez par vos vraies cl√©s)
    const firebaseConfig = {
      apiKey: "AIzaSyDPSOCW5zL0_7X-jdEtM66yZeypx6XnHto",
      authDomain: "makoti-cookies.firebaseapp.com",
      projectId: "makoti-cookies"
    };

    const app = initializeApp(firebaseConfig, 'test-' + Date.now());
    const db = getFirestore(app);

    console.log('‚úÖ Firebase connect√©');

    // 1. Nettoyer les anciennes reviews
    console.log('üóëÔ∏è Suppression des anciennes reviews...');
    const oldReviews = await getDocs(collection(db, 'reviews'));
    for (const doc of oldReviews.docs) {
      await deleteDoc(doc.ref);
    }
    console.log(`‚úÖ ${oldReviews.docs.length} anciennes reviews supprim√©es`);

    // 2. R√©cup√©rer les produits existants
    console.log('üì¶ R√©cup√©ration des produits...');
    const productsSnapshot = await getDocs(collection(db, 'products'));
    
    if (productsSnapshot.empty) {
      alert('‚ùå Aucun produit trouv√© ! Ajoutez d\'abord des produits √† votre collection.');
      return;
    }

    const products = [];
    productsSnapshot.forEach(doc => {
      const data = doc.data();
      products.push({ id: doc.id, name: data.name });
      console.log(`üì¶ Produit: "${data.name}" ‚Üí ID: ${doc.id}`);
    });

    // 3. Cr√©er des reviews r√©alistes
    console.log('‚≠ê Cr√©ation de reviews r√©alistes...');
    
    const reviewTemplates = [
      { rating: 5, userName: "Marie Dubois", comment: "Absolument d√©licieux ! Texture parfaite et go√ªt authentique. Je recommande vivement !" },
      { rating: 4, userName: "Pierre Martin", comment: "Tr√®s bon produit, livraison rapide. L√©g√®rement trop sucr√© √† mon go√ªt mais tr√®s satisfait." },
      { rating: 5, userName: "Sophie Laurent", comment: "Les meilleurs cookies que j'ai jamais mang√©s ! Toute la famille adore. Commande d√©j√† repass√©e." },
      { rating: 4, userName: "Jean Moreau", comment: "Excellente qualit√©, emballage soign√©. Le prix est un peu √©lev√© mais √ßa vaut le coup." },
      { rating: 5, userName: "Anna Weber", comment: "Go√ªt incroyable, on sent la qualit√© des ingr√©dients. Service client au top aussi !" },
      { rating: 3, userName: "David Lambert", comment: "Correct sans plus. Pas mauvais mais j'en attendais plus vu les avis pr√©c√©dents." },
      { rating: 5, userName: "Claire Rousseau", comment: "Parfait pour les √©v√©nements ! Mes invit√©s ont ador√©. Texture moelleuse et croustillante √† la fois." },
      { rating: 4, userName: "Thomas Klein", comment: "Frais et authentique. Livr√© rapidement. J'aurais aim√© plus de vari√©t√© dans les saveurs." },
      { rating: 5, userName: "Julie Petit", comment: "Incontournable ! C'est devenu ma p√¢tisserie pr√©f√©r√©e. Qualit√© constante √† chaque commande." },
      { rating: 4, userName: "Marc Benoit", comment: "Tr√®s bon rapport qualit√©-prix. Cookies bien emball√©s, aucun n'√©tait cass√©." }
    ];

    let reviewCount = 0;
    
    // Distribuer les reviews sur les produits (certains produits auront plus d'avis)
    for (let i = 0; i < Math.min(products.length, 6); i++) {
      const product = products[i];
      
      // Nombre d'avis variable : de 1 √† 4 selon le produit
      const numReviews = Math.min(
        Math.floor(Math.random() * 4) + 1, 
        reviewTemplates.length - reviewCount
      );
      
      console.log(`\nüç™ Cr√©ation de ${numReviews} review(s) pour: "${product.name}"`);
      
      for (let j = 0; j < numReviews && reviewCount < reviewTemplates.length; j++) {
        const template = reviewTemplates[reviewCount];
        
        const review = {
          productId: product.id, // ID Firestore r√©el
          userId: `test-user-${reviewCount}`,
          userName: template.userName,
          userEmail: `user${reviewCount}@test.com`,
          rating: template.rating,
          comment: `${template.comment} (Produit: ${product.name})`,
          orderId: `test-order-${reviewCount}`,
          createdAt: serverTimestamp()
        };
        
        await addDoc(collection(db, 'reviews'), review);
        console.log(`‚úÖ Review ${template.rating}‚≠ê par ${template.userName}`);
        
        reviewCount++;
      }
    }

    // 4. V√©rification et statistiques
    console.log('\nüìä V√âRIFICATION FINALE...');
    const finalReviews = await getDocs(collection(db, 'reviews'));
    
    const reviewsByProduct = {};
    const ratingsDistribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    
    finalReviews.forEach(doc => {
      const data = doc.data();
      
      // Grouper par produit
      if (!reviewsByProduct[data.productId]) {
        reviewsByProduct[data.productId] = { ratings: [], count: 0 };
      }
      reviewsByProduct[data.productId].ratings.push(data.rating);
      reviewsByProduct[data.productId].count++;
      
      // Distribution des notes
      ratingsDistribution[data.rating]++;
    });

    console.log('\nüç™ R√âSUM√â PAR PRODUIT:');
    Object.entries(reviewsByProduct).forEach(([productId, data]) => {
      const product = products.find(p => p.id === productId);
      const avg = data.ratings.reduce((sum, r) => sum + r, 0) / data.ratings.length;
      console.log(`‚Ä¢ "${product?.name}": ${avg.toFixed(1)}‚≠ê (${data.count} avis)`);
    });

    console.log('\nüìä DISTRIBUTION DES NOTES:');
    Object.entries(ratingsDistribution).forEach(([rating, count]) => {
      const percentage = ((count / reviewCount) * 100).toFixed(1);
      console.log(`${rating}‚≠ê: ${count} avis (${percentage}%)`);
    });

    console.log('\nüéØ STATISTIQUES GLOBALES:');
    console.log(`‚Ä¢ Total reviews cr√©√©es: ${reviewCount}`);
    console.log(`‚Ä¢ Produits avec avis: ${Object.keys(reviewsByProduct).length}/${products.length}`);
    console.log(`‚Ä¢ Note moyenne globale: ${(Object.values(ratingsDistribution).reduce((sum, count, index) => sum + (count * (index + 1)), 0) / reviewCount).toFixed(1)}‚≠ê`);

    // Alerte de succ√®s
    alert(`üéâ SUCC√àS !\n\n${reviewCount} reviews cr√©√©es pour ${Object.keys(reviewsByProduct).length} produits !\n\nVos √©toiles devraient maintenant s'afficher sur la page /produkt !\n\nActualisez la page pour voir les r√©sultats.`);
    
    console.log('\n‚úÖ TERMIN√â ! Vos donn√©es de test sont pr√™tes !');
    console.log('üîÑ Actualisez votre page /produkt pour voir les ratings s\'afficher !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es de test:', error);
    alert('‚ùå Erreur ! V√©rifiez la console pour plus de d√©tails.');
  }
}

// Lancer la cr√©ation
createRatingTestData(); 